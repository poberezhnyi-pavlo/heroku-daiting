<?php

namespace App\Models;

use Carbon\Carbon;
use Cmgmyr\Messenger\Traits\Messagable;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Relations\MorphTo;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

/**
 * Class User
 * @package App\Models
 *
 * @property string role
 * @property string status
 * @property string avatar
 * @property string name
 * @property string last_name
 * @property string email
 * @property string phone
 * @property string user_type
 * @property int user_id
 * @property Carbon created_at
 * @property Carbon edited_at
 * @property Carbon|null deleted_at
 * @property string full_name
 *
 * Generated by relations
 * @property user
 */
class User extends Authenticatable
{
    use Notifiable;
    use SoftDeletes;
    use Messagable;

    public const ROLE_SUPER_ADMIN = 'superAdmin';
    public const ROLE_ADMIN = 'admin';
    public const ROLE_EDITOR = 'editor';
    public const ROLE_MAN = 'man';
    public const ROLE_WOMAN = 'woman';
    public const ROLE_USER = 'user';

    /**
     * @var string[]
     */
    public const ROLES = [
        self::ROLE_USER,
        self::ROLE_EDITOR,
        self::ROLE_ADMIN,
    ];

    /**
     * @var string
     */
    public const DEFAULT_AVATAR = 'pre-defined/user.png';

    /**
     * @var string
     */
    public const AVATAR_PATH = 'avatars';

    /**
     * The attributes that are mass assignable.
     *
     * @var string[]
     */
    protected $fillable = [
        'name',
        'last_name',
        'email',
        'password',
        'role',
        'avatar',
        'phone',
        'deleted_at',
    ];

    /**
     * @var string[]
     */
    protected $guarded = [
        '_token',
        '_method',
    ];

    protected $with = [
        'user',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    /**
     * Role relation
     *
     * @return MorphTo
     */
    public function user(): MorphTo
    {
        return $this->morphTo();
    }

    /**
     * @return bool
     */
    public function isEditor(): bool
    {
        return $this->role === self::ROLE_EDITOR;
    }

    /**
     * @return bool
     */
    public function isSuperAdmin(): bool
    {
        return $this->role === self::ROLE_SUPER_ADMIN;
    }

    /**
     * @return bool
     */
    public function isAdmin(): bool
    {
        return $this->role === self::ROLE_ADMIN;
    }

    /**
     * @return bool
     */
    public function hasManagerRole(): bool
    {
        return in_array($this->role,
            [
                self::ROLE_SUPER_ADMIN,
                self::ROLE_ADMIN,
            ]
        );
    }

    /**
     * @return bool
     */
    public function isMan(): bool
    {
//        return $this->role === self::ROLE_MAN;
    }

    /**
     * @return bool
     */
    public function isWoman(): bool
    {
//        return $this->role === self::ROLE_WOMAN;
    }

    /**
     * @return bool
     */
    public function isActive(): bool
    {
        return !$this->trashed();
    }

    /**
     * @return array
     */
    public function getRoles(): array
    {
        if ($this->isSuperAdmin()) {
            return array_merge(
                self::ROLES,
                [
                    self::ROLE_SUPER_ADMIN,
                ]
            );
        }

        return self::ROLES;
    }

    /**
     * @param string $url
     * @return string
     */
    public function getAvatarAttribute($url): string
    {
        return $url ?: self::DEFAULT_AVATAR;
    }

//    /**
//     * @param $value
//     */
//    public function setDeletedAtAttribute($value): void
//    {
//        dd('user >> ', $value);
//        $this->attributes['deleted_at'] = $value ? null : now();
//    }

    /**
     * Scope a query by User type.
     *
     * @param Builder $query
     * @param string $type
     * @return Builder
     */
    public function scopeWhereUserType(Builder $query, string $type): Builder
    {
        //get simple users
        if ($type === Man::class || $type === Woman::class) {
            return $query->whereHasMorph('user', $type);
        }

        //get admin users
        return $query->whereIn('role', [
            self::ROLE_ADMIN,
            self::ROLE_EDITOR,
        ]);
    }

    public function getFullNameAttribute(): string
    {
        return "{$this->name} {$this->last_name}";
    }

    /**
     * @param Builder $query
     * @return Builder
     */
    public function scopeHasManRelation(Builder $query)
    {
        return $query->hasMorph(
            'user',
            Man::class
        );
    }

    /**
     * @param Builder $query
     * @return Builder
     */
    public function scopeHasWomanRelation(Builder $query)
    {
        return $query->hasMorph(
            'user',
            Woman::class
        );
    }
}
